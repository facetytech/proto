/*Interface for interaction with Legal Agreements system.

This interface provides services for verification user's status of accepting Legal Agreements
updating it,  logging of accepting it and getting the texts of current Legal Agreements.
*/

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


/*Verification and logging of accepting Legal Agreements.

The service provide the feature for verification user's status of accepting Legal Agreements
and logging of accepting it.

It contains three methods:
    - CheckProtocol - for verification of status of accepting Legal Agreements
    - AddProtocol - for adding new record about Legal Agreements was accepted
    - AddRemark - for adding new record about Country Remark was accepted
*/
service Adoption {


    /*Verification of status of accepting Legal Agreements.

    Args:
        Selector - contains id of a protocol was accepted

    Returns:
        Verdict - contains status of verification(bool), comment (string) and texts of actually Legal Agreements
        if the user's status of accepting Legal Agreements is not actual
    */
    rpc CheckProtocol (Selector) returns (Verdict) {}


    /*Adding a new record about Legal Agreements was accepted.

    Args:
        Protocol - contains information about:
            - version, hash and language of Terms Of Services and Privacy Policy;
            - list of country's remarks (version, hash & country);
            the user was accepted.
    
    Returns:
        Selector - contains id of a protocol was accepted
    */
    rpc AddProtocol (Protocol) returns (Selector) {}


    /*Adding a new record about Country Remark was accepted.

    Args:
        NewRemark - contains information about:
            - remark contains Country Remark object;
            - owner is ID of a protocol added to.
    */
    rpc AddRemark (NewRemark) returns (google.protobuf.Empty) {}

}


/*Get the Legal Agreements texts and their versions.

Service find the texts for the current user's country and language.
*/
service Receiving {
    
    rpc Texts (User) returns (Agreements) {}

}


message Selector {
    string id = 1;
}

// New remark and protocol id for adding to
message NewRemark {
    string owner = 1;
    Protocol.Remark remark = 2;
}


// Aggregated verdict of verification of current version of Terms Of Services, Privacy Policy and Country Remark
message Verdict {

    // Contains status of verification(bool) and comment (string) of current version of Terms Of Services
    message Tos {
        bool status = 1;
        string comment = 2;
    }
    Tos tos = 1;
    
    // Contains status of verification(bool) and comment (string) of current version of Privacy Policy
    message Pp {
        bool status = 1;
        string comment = 2;
    }
    Pp pp = 2;
    
    // Contains status of verification(bool) and comment (string) of current version of Country Remark
    message Remark {
        bool status = 1;
        string comment = 2;
    }
    Remark remark = 3;
    
    Agreements agreements = 4;
}


// Contains information about accepted Legal Agreements
message Protocol {

    // The data about accepted Terms Of Services
    message Tos {
        string version = 1;
        string hash = 2;
        string lang = 3;
        google.protobuf.Timestamp timestamp = 4;
    }
    Tos tos = 1;

    // The data about accepted Privacy Policy
    message Pp {
        string version = 1;
        string hash = 2;
        string lang = 3;
        google.protobuf.Timestamp timestamp = 4;
    }
    Pp pp = 2;

    // The data about accepted Country Remark
    message Remark {
        string version = 1;
        string hash = 2;
        string country = 3;
        google.protobuf.Timestamp timestamp = 4;
    }
    repeated Remark remarks = 3;

    // Contains information about the user and his device at the moment of accepting Legal Agreements
    message Header {
        string key = 1;
        string value = 2;
    }
    repeated Header headers = 4;

    // id of a protocol was accepted before
    string previously = 5;
}

// Defines the data where is the current user from and their protocol ID.
message User {

    // Accepted protocol ID
    string protocol = 1;

    // User's language list
    repeated string langs = 2;

    // Current user's country
    string country = 3;
}


// Contains Terms of Service, Privacy Policy and Country Remark texts and their hashes
message Agreements {

    message Tos {
        string text = 1;
        string version = 2;
        string hash = 3;
        string lang = 4;
    }
    Tos tos = 1;
    
    message Pp {
        string text = 1;
        string version = 2;
        string hash = 3;
        string lang = 4;
    }
    Pp pp = 2;

    message Remark {
        string text = 1;
        string version = 2;
        string hash = 3;
    }
    repeated Remark remarks = 3;

}
